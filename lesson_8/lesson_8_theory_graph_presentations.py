from collections import namedtuple

# (1 способ) Хранение графа в МАТРИЦЕ СМЕЖНОСТИ
# каждая строка - вершина. Значение - связь и ее стоимость с другой вершиной

# граф на картинке 1 (не ориентированный)
graph = [
    [0, 1, 1, 0],
    [1, 0, 1, 1],
    [1, 1, 0, 0],
    [0, 1, 0, 0]  # линия из л-в угла в п-н - линия симметрии. Это признак неориентированного графа
]

print(*graph, sep='\n')
print('==================')

# граф на картинке 2 (ориентированный)
graph = [
    [0, 1, 1, 0],
    [0, 0, 1, 1],
    [0, 1, 0, 0],
    [0, 0, 0, 0]
]

print(*graph, sep='\n')
print('==================')

# граф на картинке 3 (взвешенный)
graph = [
    [0, 2, 3, 0],
    [0, 0, 2, 1],
    [0, 2, 0, 0],
    [0, 0, 0, 0]
]

print(*graph, sep='\n')
print('==================')

# (2 способ) Хранение графа в СПИСКЕ СМЕЖНОСТИ
# каждый элемент списка - вершина (список ее связей с дргуими вершинами)

# граф на картинке 1 (не ориентированный)
graph = [
    [1, 2],
    [0, 2, 3],
    [0, 1],
    [1]
]

print(*graph, sep='\n')
print('==================')

# он же, но вариант хранениея через словарь и множества

graph_2 = {
    0: {1, 2},
    1: {0, 2, 3},
    2: {0, 1},
    3: {1}
}

print(graph_2)

# Как проверить, что из вершины 1 можно попасть в вершину 3?
if 3 in graph_2[1]:
    print(True)
print('==================')

# Хранение взвешенного графа в именованных кортежах:

Vertex = namedtuple('Vertex', ['vertex', 'edge'])
graph_3 = []
graph_3.append([Vertex(1, 2), Vertex(2, 3)])
graph_3.append([Vertex(2, 2), Vertex(2, 2), Vertex(3, 1)])
graph_3.append([Vertex(0, 3), Vertex(1, 2)])
graph_3.append([Vertex(1, 1)])
print(*graph_3, sep='\n')

# Как проверить, что из вершины 1 можно попасть в вершину 3?
for v in graph_3[1]:
    if v.vertex == 3:
        print(True)
print('==================')

# Можно создать свой класс графа (если есть много свойств вершиин)
class Graph:
    def __init__(self, vertex, edge, spam):
        self.vertex = vertex
        self.edge = edge
        self.spam = spam


# (3 способ) Хранение графа в СПИСКЕ РЕБЕР

graph = [(0, 1), (0, 2), (1, 2), (2, 1), (1, 3)]
print(*graph, sep='\n')